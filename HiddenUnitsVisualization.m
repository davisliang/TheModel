function []=HiddenUnitsVisualization()

%   HiddenUnitsVisualization()
%   Sample code of visualizing the hidden unit activations (PC projection)
%   in two-stage mixed-expert network training. In this code, the
%   visualization only involves two object categories and 20 output nodes
%   (10 each). 12 training images, 4 testing images per individual.
%
%   Note: The preprocessedData should be generated by the user. Here we use
%   the data applied to the following paper:
%   Wang, P., Gauthier, I., and Cottrell, G.W. (2014) Experience matters: Modeling the relationship between face and object recognition.
%
%   Author: Panqu Wang
%   This is only a toy version. Do not distribute without permission.  

close all; clear all; clc;


% Get preprocessedData
load f_PCA_DATASET_allData_16images 

% Category to visualize with faces
newExpertName='Cars'; 

% Number of hidden unit in the two-layer neural network
para.numHiddenSet=[20]; 

% The training iterations for the two networks (in mixed-expert network training).
para.nIterNewExpertSet=[10 500]; 


% Find the face category index
for indexPreprocessedData=1:length(preprocessedData)
    name=preprocessedData(indexPreprocessedData).name;
    if strcmp(name,'Faces')
       faceDataIndex=indexPreprocessedData;
    end
end

xlimNum=20;

figure;
for indexIter=1:length(para.nIterNewExpertSet) 
    nIterNewExpert=para.nIterNewExpertSet(indexIter);
    totalSampleCurrentExpert=1;
    
    for indexHidden=1:length(para.numHiddenSet)
        numHidden=para.numHiddenSet(indexHidden);
        
        %% 1. Train the face expert network
        nIterFace=50;
        [weightFaceExpertNetwork testPerformanceFace hiddenActivationFaces]=NetworkTrainingFaceExpertHiddenUnits(preprocessedData(faceDataIndex),numHidden,nIterFace);

        
        %% 2. Start training the other expert network
        % In this experiment, we train non-face expert. We do this by adding output
        % nodes with respect to the new output in the network. 
        [weightNewExpertNetwork testPerformanceNewExpert testPerformanceFaceInExpertResult hiddenActivationNewExpert]=NetworkTrainingNewExpertCottrellSuggest(preprocessedData,newExpertName,numHidden,nIterNewExpert,weightFaceExpertNetwork);


        hiddenActivationAll=[hiddenActivationFaces hiddenActivationNewExpert];
        hiddenActivationAllTwoFigures(indexIter,:)=hiddenActivationAll;

        display(['nIterNewExpert=' num2str(nIterNewExpert) ' numHidden=' num2str(numHidden) ...
            ' testPerformanceFace=' num2str(testPerformanceFace) ' testPerformanceNewExpert=' num2str(testPerformanceNewExpert)]);

        %% Visualize the hidden units activation.
        hiddenActivationAllMatrix=arrayfun(@(x) x.hidden_activation_PCA, [hiddenActivationAll{:}], 'UniformOutput', false);
        hiddenActivationAllMatrix=cell2mat(hiddenActivationAllMatrix);

        meanActivation=mean(hiddenActivationAllMatrix,2);
        hiddenActivationAllMatrixSub=hiddenActivationAllMatrix-repmat(meanActivation,1,size(hiddenActivationAllMatrix,2));
        Y=hiddenActivationAllMatrixSub'/sqrt(size(hiddenActivationAllMatrix,2)-1);           
        
        [U S PC]=svd(Y);


        %% Projection and plot
        totalSubPlots=size(hiddenActivationAll,2);
        for pcanum=1:totalSubPlots
            eachQuantity(pcanum)=size(hiddenActivationAll{pcanum}.hidden_activation_PCA,2);
            if pcanum<=2
            PC_proj{indexIter,pcanum}(:,:)=PC(:,2:3)'*hiddenActivationAllMatrixSub(:,eachQuantity(pcanum)*(pcanum-1)+1:eachQuantity(pcanum)*pcanum);
            else
                index=find(hiddenActivationAll{1,pcanum}.nodeid_PCA>10);%find the index of non-face experts in non-face expert training with faces
                index=index+eachQuantity(pcanum)*(pcanum-2);
                PC_proj{indexIter,pcanum}(:,:)=PC(:,2:3)'*hiddenActivationAllMatrixSub(:,index);   
            end

            subplot(2,totalSubPlots,(indexIter-1)*totalSubPlots+pcanum);

            if pcanum<=2
                scatter(PC_proj{indexIter,pcanum}(1,:),PC_proj{indexIter,pcanum}(2,:),15,hiddenActivationAll{pcanum}.color_PCA,'o','filled');
                xlim([-xlimNum xlimNum]);ylim([-xlimNum xlimNum]);
            else
                scatter(PC_proj{indexIter,pcanum}(1,:),PC_proj{indexIter,pcanum}(2,:),15,hiddenActivationAll{pcanum}.color_PCA(hiddenActivationAll{1,pcanum}.nodeid_PCA>10,:),'o','filled');
                xlim([-xlimNum xlimNum]);ylim([-xlimNum xlimNum]);
            end
        end            

        hiddenActivationAllMatrixSubTwoFigures(:,:,indexIter)=hiddenActivationAllMatrixSub;

        recordedData{indexIter}(totalSampleCurrentExpert,:)=[testPerformanceFace testPerformanceNewExpert];
        totalSampleCurrentExpert=totalSampleCurrentExpert+1;
    end
end

display(['Expert Network Training Finished.']);

